#Proj Group 2 SnapnBake


import cv2
import pytesseract
import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
from tkinter import messagebox
import re

# Set the path to the Tesseract executable (replace this with your actual path)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# Set up a set to keep track of processed gluten-containing ingredients
processed_gluten_ingredients = set()

def process_image(scale_factor):
    file_path = filedialog.askopenfilename(title="Select an Image", filetypes=[("Image files", "*.png;*.jpg;*.jpeg;*.gif")])

    if file_path:
        # Read the selected image
        image = cv2.imread(file_path)

        # Use Tesseract to extract text
        text = pytesseract.image_to_string(image)

        # Replace "Ye" with "1/2" in the extracted text
        text = text.replace("Ye", "1/2")

        # Update the Text widget to display the extracted text
        text_display.delete(1.0, tk.END)  # Clear existing text
        text_display.insert(tk.END, f"Original Text:\n{text}\n\n")

        # Process the text to find and scale numbers
        scaled_text = scale_numbers(text, scale_factor)

        # Display the scaled text
        text_display.insert(tk.END, f"Scaled Text (Factor {scale_factor}):\n{scaled_text}\n\n")

        # Save the scaled text to a .txt file
        output_file_path = 'Scaled_Recipe.txt'
        with open(output_file_path, 'w') as file:
            file.write(scaled_text)

        # Resize the image to a smaller size for display (optional)
        resized_image = cv2.resize(image, (800, 600))

        # Display the original image
        cv2.imshow('Original Image', resized_image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

        print(f"Scaled text saved to {output_file_path}")

        # Show a message indicating image processing is done
        messagebox.showinfo("Image Processing Complete", "Image processing is complete. Check the output.")

        # Open a new window to display the text
        text_window = tk.Toplevel(root)
        text_window.title("Extracted and Scaled Text")

        # Text widget to display extracted and scaled text
        text_display_popup = tk.Text(text_window, height=20, width=100, wrap=tk.WORD, font=('Helvetica', 12))
        text_display_popup.pack(pady=20)
        text_display_popup.insert(tk.END, f"Original Text:\n{text}\n\n")
        text_display_popup.insert(tk.END, f"Scaled Text (Factor {scale_factor}):\n{scaled_text}\n\n")

def scale_numbers(text, scale_factor):
    scaled_text = ""
    for word in text.split():
        try:
            number = float(word)
            scaled_number = number * scale_factor
            scaled_text += f"{scaled_number} "
        except ValueError:
            scaled_text += f"{word} "
    return scaled_text

def gluten_suggestion():
    # Get the current content of the Text widget
    scaled_text = text_display.get(1.0, tk.END)

    # Use a regular expression to find ingredients that may contain gluten
    gluten_pattern = re.compile(r'\b(wheat|barley|rye|oats|all-purpose flour|flour)\b', re.IGNORECASE)
    matches = gluten_pattern.findall(scaled_text)

    if matches:
        # Display gluten-containing ingredients and suggest alternatives
        gluten_message = "Ingredients that may contain gluten:\n"
        for ingredient in matches:
            if ingredient not in processed_gluten_ingredients:
                gluten_message += f"{ingredient}\n"
                processed_gluten_ingredients.add(ingredient)
                # Add your own suggestions for gluten-free alternatives here
                gluten_message += f"Suggested gluten-free alternative for {ingredient}: <Alternative> Try using a gluten free flour alternative that claims 1 to 1 replacement. Or you can try using a combination of rice flour with starchy additives like potato starch, or xanthum powder\n"
    else:
        gluten_message = "No gluten-containing ingredients found in the scaled text."

    # Display the gluten suggestion in the Text widget
    text_display.insert(tk.END, gluten_message)

# Create the main window
root = tk.Tk()
root.title("Image Text Extractor and Scaler")

# Configure themed style for rounded corners
style = ttk.Style()
style.configure("TFrame", background='pink', borderwidth=5, relief=tk.SOLID, padding=(10, 10))

# Apply style to the main window
root.geometry("800x600")
root.configure(bg='pink')

# Title bar
title_label = tk.Label(root, text="Image Text Extractor and Scaler", font=('Helvetica', 16, 'bold'), bg='pink')
title_label.pack(pady=10)

# Create a themed frame for buttons and text display
main_frame = ttk.Frame(root, style="TFrame")
main_frame.pack(pady=20, padx=20, fill=tk.BOTH, expand=True)

# Entry widget for scale factor
scale_label = tk.Label(main_frame, text="Enter Scale Factor:")
scale_label.pack(pady=5)
scale_entry = tk.Entry(main_frame)
scale_entry.pack(pady=5)

# Buttons
processor_button = tk.Button(main_frame, text="Process and Scale", command=lambda: process_image(float(scale_entry.get())))
processor_button.pack(pady=10)

# Button for gluten suggestions
gluten_button = tk.Button(main_frame, text="Gluten Supplement Suggestion", command=gluten_suggestion)
gluten_button.pack(pady=10)

# Blank buttons with no function
for i in range(1, 4):
    blank_button = tk.Button(main_frame, text=f"Button {i}")
    blank_button.pack(pady=10)

# Exit button
exit_button = tk.Button(main_frame, text="Exit", command=root.destroy)
exit_button.pack(pady=10)

# Text widget to display extracted text
text_display = tk.Text(main_frame, height=20, width=100, wrap=tk.WORD, font=('Helvetica', 12))
text_display.pack(pady=20)

# Run the Tkinter event loop
root.mainloop()
