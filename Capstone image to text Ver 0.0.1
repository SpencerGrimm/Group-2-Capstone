import cv2
import pytesseract
import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
from tkinter import messagebox
import re

# Set the path to the Tesseract executable (replace this with your actual path)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# Set up a set to keep track of processed gluten-containing ingredients
processed_gluten_ingredients = set()

def confirm_text(text):
    # Create a new window for text confirmation
    confirm_window = tk.Toplevel(root)
    confirm_window.title("Confirm Text")

    # Text widget to display extracted text for confirmation
    confirm_text_display = tk.Text(confirm_window, height=10, width=60, wrap=tk.WORD, font=('Helvetica', 12))
    confirm_text_display.pack(pady=20)
    confirm_text_display.insert(tk.END, f"Is the detected text correct?\n\n{text}\n\n")

    # Buttons for confirmation
    confirm_button = tk.Button(confirm_window, text="Yes", command=confirm_window.destroy)
    confirm_button.pack(side=tk.LEFT, padx=10, pady=10)
    cancel_button = tk.Button(confirm_window, text="No", command=root.destroy)
    cancel_button.pack(side=tk.RIGHT, padx=10, pady=10)

    # Wait for confirmation
    confirm_window.wait_window()

    return confirm_window.winfo_exists()

def process_image(scale_factor):
    file_path = filedialog.askopenfilename(title="Select an Image", filetypes=[("Image files", "*.png;*.jpg;*.jpeg;*.gif")])

    if file_path:
        # Read the selected image
        image = cv2.imread(file_path)

        # Use Tesseract to extract text
        text = pytesseract.image_to_string(image)

        # Replace "Ye" with "1/2" in the extracted text
        text = text.replace("Ye", "1/2")

        # Confirm the detected text before proceeding
        if not confirm_text(text):
            return

        # Update the Text widgets to display the extracted and scaled text side by side
        text_display_original.delete(1.0, tk.END)  # Clear existing text
        text_display_original.insert(tk.END, f"Original Text:\n{text}\n\n")

        scaled_text = scale_numbers(text, scale_factor)

        text_display_scaled.delete(1.0, tk.END)  # Clear existing text
        text_display_scaled.insert(tk.END, f"Scaled Text (Factor {scale_factor}):\n{scaled_text}\n\n")

        # Save the scaled text to a .txt file
        output_file_path = 'Scaled_Recipe.txt'
        with open(output_file_path, 'w') as file:
            file.write(scaled_text)

        # Resize the image to a smaller size for display (optional)
        resized_image = cv2.resize(image, (800, 600))

        # Display the original image
        cv2.imshow('Original Image', resized_image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

        print(f"Scaled text saved to {output_file_path}")

        # Show a message indicating image processing is done
        messagebox.showinfo("Image Processing Complete", "Image processing is complete. Check the output.")

def scale_numbers(text, scale_factor):
    scaled_text = ""
    for word in text.split():
        try:
            number = float(word)
            scaled_number = number * scale_factor
            scaled_text += f"{scaled_number} "
        except ValueError:
            scaled_text += f"{word} "
    return scaled_text

# Create the main window
root = tk.Tk()
root.title("Image Text Extractor and Scaler")

# Configure themed style for rounded corners
style = ttk.Style()
style.configure("TFrame", background='pink', borderwidth=5, relief=tk.SOLID, padding=(10, 10))

# Apply style to the main window
root.geometry("800x600")
root.configure(bg='pink')

# Title bar
title_label = tk.Label(root, text="Image Text Extractor and Scaler", font=('Helvetica', 16, 'bold'), bg='pink')
title_label.pack(pady=10)

# Create a themed frame for buttons and text display
main_frame = ttk.Frame(root, style="TFrame")
main_frame.pack(pady=20, padx=20, fill=tk.BOTH, expand=True)

# Entry widget for scale factor
scale_label = tk.Label(main_frame, text="Enter Scale Factor:")
scale_label.pack(pady=5)
scale_entry = tk.Entry(main_frame)
scale_entry.pack(pady=5)

# Buttons
processor_button = tk.Button(main_frame, text="Process and Scale", command=lambda: process_image(float(scale_entry.get())))
processor_button.pack(pady=10)

# Blank buttons with no function
for i in range(1, 4):
    blank_button = tk.Button(main_frame, text=f"Button {i}")
    blank_button.pack(pady=10)

# Exit button
exit_button = tk.Button(main_frame, text="Exit", command=root.destroy)
exit_button.pack(pady=10)

# Text widgets to display extracted and scaled text
text_display_original = tk.Text(main_frame, height=20, width=50, wrap=tk.WORD, font=('Helvetica', 12))
text_display_original.pack(side=tk.LEFT, padx=10, pady=20)

text_display_scaled = tk.Text(main_frame, height=20, width=50, wrap=tk.WORD, font=('Helvetica', 12))
text_display_scaled.pack(side=tk.LEFT, padx=10, pady=20)

# Run the Tkinter event loop
root.mainloop()
